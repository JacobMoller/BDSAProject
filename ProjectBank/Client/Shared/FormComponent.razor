@inject NavigationManager NavigationManager
@inject HttpClient Http
<EditForm Model="@project" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="project.Title" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="project.Description" />
    </div>

    <div class="mb-3">
        <label class="form-label">Tags</label>
            <InputText id="tags" class="form-control" @bind-Value="@tagListString"/>
    </div>
    <p>@target</p>

    <button type="submit" class="btn btn-success">@ButtonName</button>
</EditForm> 

@code {
    string target = "hi";
    [Parameter]
    public Project project {get; set;}

    [Parameter]
    public string ButtonName {get; set;}

    private string tagListString = "";
    
    //receiving a list of tags that have to be displayed
    protected override void OnInitialized() {
        if (project.Tags != null) {
            foreach (var tag in project.Tags)
            {
                tagListString += tag.Name + ", ";
            }
            tagListString = tagListString.TrimEnd(',',' ');
        }
    }

    private async Task HandleValidSubmit() {
        target = "Submit!";
        //handle submit + send/persist to db?
        tagStringToList();
        
        var response = await Http.PostAsJsonAsync("api/Projects", project);

        if(response.IsSuccessStatusCode){

            var created = await response.Content.ReadFromJsonAsync<ProjectDTO>();

            var uri = $"{NavigationManager.BaseUri}";

            NavigationManager.NavigateTo(uri);
        }
    }

    private void tagStringToList() {
        string[] tagNames = tagListString.Replace(" ","").Split(',');
        var tagList = new List<Tag>();
        foreach (var tagName in tagNames)
        {
            tagList.Add(new Tag(tagName));
        }
        project.Tags = tagList;
    }
}