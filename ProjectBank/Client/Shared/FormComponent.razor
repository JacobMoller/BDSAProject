@inject NavigationManager NavigationManager
@inject HttpClient Http

<EditForm Model="@project" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="project.Title" />
        <ValidationMessage For="@(()=>project.Title)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="project.Description" />
        <ValidationMessage For="@(()=>project.Description)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Tags</label>
        <InputText id="tags" class="form-control" @bind-Value="@tagListString" />
        <p>To write several tags separate them by space, comma or both</p>
    </div>
    <button type="submit" class="btn btn-success">@ButtonName</button>
</EditForm>


@code
{
    [Parameter]
    public CreateProjectDTO? project { get; set; }

    [Parameter]
    public string? ButtonName { get; set; }

    private string tagListString = "";
    private string? ShowAlert;

    private async Task HandleValidSubmit()
    {
        string pattern = @"\b\w+\b";
        ICollection<string> tags = new List<string>();
        foreach (Match match in Regex.Matches(tagListString, pattern))
        {
            tags.Add(match.Value);
        }
        if (project != null)
        {
            project.Tags = tags;
        }

        if (project is UpdateProjectDTO)
        {
            var updateProject = (UpdateProjectDTO)project;
            var response = await Http.PutAsJsonAsync($"api/Projects/{updateProject.Id}", updateProject);

            if (response.IsSuccessStatusCode)
            {
                ShowAlert = "updateSuccess";

                var uri = $"{NavigationManager.BaseUri}/MyProjects/{ShowAlert}";

                NavigationManager.NavigateTo(uri);
            }
        }
        else if (project is CreateProjectDTO)
        {
            var response = await Http.PostAsJsonAsync("api/Projects", project);
            if (response.IsSuccessStatusCode)
            {
                ShowAlert = "createSuccess";

                var created = await response.Content.ReadFromJsonAsync<ProjectDTO>();

                var uri = $"{NavigationManager.BaseUri}/MyProjects/{ShowAlert}";

                NavigationManager.NavigateTo(uri);

          }
        }

    }

    protected override void OnParametersSet()
    {
        if (project != null && project.Tags != null)
        {
            foreach (var tag in project.Tags)
            {
                tagListString += tag + ", ";
            }
            tagListString = tagListString.TrimEnd(',', ' ');
        }
    }
}
