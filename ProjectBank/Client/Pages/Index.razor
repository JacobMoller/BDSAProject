@page "/"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>




<AuthorizeView>
    <NotAuthorized>
        <div class="row justify-content-around">
            <div class="card col col-12 col-sm-6 col-md-4 col-lg-3 text-center" style="width: 18rem;">
                <div class="card-body ">
                    <p class="card-text">To see all projects please log in</p>
                    <a href="authentication/login" class="btn btn-primary stretched-link">Log in</a>
                </div>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        @if (@yourProjects == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <p><b>Yourproject length</b></p>
            <p>#@yourProjects.Length</p>
            @if (@yourProjects.Length > 0){
                <h1>Your Projects </h1>
                <div class="row justify-content-around">
                    @foreach (var project in yourProjects)
                    {
                        <div class="card col col-12 col-sm-6 col-md-4 col-lg-3" style="width: 18rem;">
                            <div class="card-body">
                                <h5 class="card-title">@project.Title</h5>
                                <p class="card-text">@project.Description</p>
                                <a href="project/@project.Id/" class="btn btn-primary stretched-link">View Project</a>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    
        <h1>Explore</h1>
        @if (@projects == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <div class="row justify-content-around">
                @foreach (var project in projects)
                {
                    <div class="card mt-4 col col-12 col-sm-6 col-md-4 col-lg-3" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title">@project.Title</h5>
                            <p class="card-text">@project.Description</p>
                            <a href="project/@project.Id/" class="btn btn-primary stretched-link">View Project</a>
                        </div>
                    </div>
                }
            </div>
        }
    </Authorized>
</AuthorizeView>
 
        



@code {
    private ProjectDTO[]? yourProjects;
    private ProjectDTO[]? projects;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private string? _authMessage;

    private CreateUserDTO user = new();

   protected override async Task OnInitializedAsync()
   {
        var authState = await authenticationStateTask;
        var userAuth = authState.User;

        if(userAuth.Identity.IsAuthenticated)
        {
            yourProjects = await Http.GetFromJsonAsync<ProjectDTO[]>("api/apply");
            projects = await Http.GetFromJsonAsync<ProjectDTO[]>("api/projects");
        }
}

    protected override async void OnAfterRender(bool firstRender)
{
    var authState = await authenticationStateTask;
    var userAuth = authState.User;
    // execute conditionally for loading data, otherwise this will load
    // every time the page refreshes
    
    if(firstRender && userAuth.Identity.IsAuthenticated)
    {
            await RegisterUser();
        // Do work to load page data and set properties
    }
}

    private async Task RegisterUser()
    {
        var authState = await authenticationStateTask;
        var userAuth = authState.User;

        if(userAuth.IsInRole("Student")){
            user.Role = Role.Student;

        } else {
            user.Role = Role.Supervisor;       
        }

        
        //var codestring = code.ToString();
        
        user.Name = userAuth.Identity?.Name;
        
        
        var response = await Http.PostAsJsonAsync("api/User", user);

        if(response.IsSuccessStatusCode){

            var created = await response.Content.ReadFromJsonAsync<UserDetailsDTO>();

            var uri = $"{NavigationManager.BaseUri}";

            NavigationManager.NavigateTo(uri);
        }
    }
}