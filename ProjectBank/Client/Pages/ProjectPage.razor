@page "/project/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Project</PageTitle>

<div class="container">
    @if (@project == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row">
            <div class="col-8">
                <h1>@project.Title</h1>
                <h3>By @user.Name</h3>
                <h4>Tags
                    @foreach (var tag in project.Tags)
                    {
                        <span class="badge bg-secondary me-2">@tag</span>
                    }
                </h4>
                <p>@project.Description</p>
            </div>
            <AuthorizeView Roles="Student">
                <Authorized>
                    <div class="col">
                        <button class="btn btn-primary px-4 mt-2" type="submit" @onclick="Apply">@ApplyText</button>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private ProjectDTO? project;
    private UserDetailsDTO? user;

    private string ApplyText = "Apply";

    private async void Apply()
    {
        //take id from student user and make a connection with the project
        var response = await Http.PutAsJsonAsync($"api/Apply/{Id}", project);

        //if(response == good){
        ApplyText = "Applied";
        //}

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            project = await Http.GetFromJsonAsync<ProjectDTO>($"api/projects/{Id}");
            if(project != null) 
            {
                user = await Http.GetFromJsonAsync<UserDetailsDTO>($"api/User/{project.SupervisorId}");
            }
        }

        await base.OnParametersSetAsync();
    }
}
