@page "/project/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime _jsRuntime

<PageTitle>Project</PageTitle>

@if(show == "show") {
    <div class="alert alert-success alert-dismissible fade show" role="alert" id="SuccessAlert">
        <div class="d-flex justify-content-center m-3"> 
            <strong>You have applied for the project!</strong> 
        </div>
    </div>
}

<div class="container">
    @if (@project == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row">
            <div class="col-8">
                <button @onclick="GoBack" class="btn btn-primary px-4 mt-2">Go Back</button>
                <h1>@project.Title</h1>
                <h3>By @(user != null ? user.Name : "unknown")</h3>
                <h4>Tags
                    @foreach (var tag in project.Tags)
                    {
                        <span class="badge bg-secondary me-2">@tag</span>
                    }
                </h4>
                <p>@project.Description</p>
            </div>
            <AuthorizeView Roles="Student">
                <Authorized>
                    <div class="col">
                        @if (!Applied)
                        {
                            <button class="btn btn-primary px-4 mt-2" type="submit" @onclick="Apply">Apply</button>
                        }
                        else
                        {
                            <button class="btn btn-secondary px-4 mt-2" disabled>@ApplyText</button>
                        }
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private ProjectDTO? project;
    private UserDetailsDTO? user;

    public int Seconds { get; set; }
    private string? show {get; set;}
    private string ApplyText = "Apply";
    private bool Applied;
    private async void Apply()
    {
        Applied = true;
        ApplyText = "Applied";
        
        if (Id != 0 && !ProjectFullCheck() && !(await UserIsParticipant()))
        {
            var response = await Http.PutAsJsonAsync($"api/Student/{Id}", project);

            if(response.IsSuccessStatusCode){
                show = "show";
                StateHasChanged();
                StartTimerAsync();
            } 
        }   
    }

    public async void StartTimerAsync()
    {
      Seconds = 5;
        while (Seconds > 0)
        {
            Seconds--;
            if(Seconds == 0){
              show = "";
              StateHasChanged();
            }
            await Task.Delay(1000);
        }
        
    }

    private async void GoBack()
    {
        await _jsRuntime.InvokeVoidAsync("history.go", -1);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            project = await Http.GetFromJsonAsync<ProjectDTO>($"api/projects/{Id}");
            if (project != null)
            {
                user = await Http.GetFromJsonAsync<UserDetailsDTO>($"api/User/{project.SupervisorId}");
            }
        }
        ProjectFullCheck();
        await UserIsParticipant();

        await base.OnParametersSetAsync();
    }

    bool ProjectFullCheck()
    {
        if (project != null && project.Participants.Count >= 5)
        {
            ApplyText = "Project Full";
            Applied = true;
            return true;
        }
        return false;
    }

    async Task<bool> UserIsParticipant()
    {
        ProjectDTO[]? yourProjects = await Http.GetFromJsonAsync<ProjectDTO[]>("api/Student");
        if (yourProjects != null && yourProjects.FirstOrDefault(p => p.Id == Id) != null)
        {
            ApplyText = "Applied";
            Applied = true;
            return true;
        }
        return false;
    }
}
