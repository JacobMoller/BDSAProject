@page "/MyProjects/{responseAction}"
@page "/MyProjects"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles="Supervisor")] 

<PageTitle>My Projects</PageTitle>

@if(show == "show"){
  @if(responseAction == "success" ){
        <div class="alert alert-success alert-dismissible fade show" role="alert" id="SuccessAlert">
            <div class="d-flex justify-content-center m-3"> 
            <strong>Project @typeOfResponse Successfully!</strong> 
            </div>
        </div>
  }
}
<h1>My Projects</h1>

<div class="container MyProjectsContainer">
    <div class="row p-3">
        <div class="col-8"><strong>Name</strong></div>
        <div class="col-4"><strong>Tools</strong></div>
    </div>
    @if (@projects == null)
    {
      <p>Loading...</p>
    }
    else
    {
      @if (@projects.Count() > 0){
        @foreach (var project in projects)
        {
        <div class="row p-3">
            <div class="col-8"><a href="project/@project.Id/">@project.Title</a></div>
            <div class="col-4">
                <a href="editproject/@project.Id/" class="btn btn-warning">Edit</a>
                <button type="button" class="btn btn-danger ms-3" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="@(() => SetID(@project.Id))">
                    Delete
                </button>
            </div>
        </div>
        }
      }
      else{
        <p>No Projects</p>
      }
    }
</div>

<div class="modal" tabindex="-1" id="deleteModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure that you want to delete?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="DeleteProject">Delete</button>
      </div>
    </div>
  </div>
</div>

@code {
    private ProjectDTO[]? projects;

    private int specificId{get; set;}

    private void SetID(int id){
      specificId = id;
    }

    [Parameter]
    public string? responseAction { get; set; }

    private string? typeOfResponse{get; set;}

    private string? show {get; set;}


    protected override async Task OnParametersSetAsync()
    {

        var response = (await Http.GetFromJsonAsync<List<ProjectDTO>>($"api/MyProjects"));
        var projects = response != null ? response.ToArray() : new ProjectDTO[0];
        await base.OnParametersSetAsync();


        
        if(responseAction != null){
        if(responseAction.Contains("create")){
          typeOfResponse = "Created";
        } else {
          typeOfResponse = "Updated";
        } 

        if(responseAction.Contains("Success")){
            responseAction = "success";
            show = "show";
          } 
        }
         await base.OnParametersSetAsync();
        
        StartTimerAsync();
    }

    [Parameter] public int Seconds { get; set; }

    public async void StartTimerAsync()
    {
      Seconds = 5;
        while (Seconds > 0)
        {
            Seconds--;
            if(Seconds == 0){
              show = "";
              StateHasChanged();
            }
            await Task.Delay(1000);
        }
        
    }

    private async Task DeleteProject(){
        var deletedProject = await Http.DeleteAsync($"api/projects/{specificId}");

        if(deletedProject.IsSuccessStatusCode){

            typeOfResponse = "Deleted";
            responseAction = "success";
            show = "show";
            StartTimerAsync();
            projects = (await Http.GetFromJsonAsync<List<ProjectDTO>>($"api/MyProjects")).ToArray();
            await base.OnParametersSetAsync(); 
        }
      
    }

}